# TO BUILD: sudo singularity build entheome.sif entheome.sif.def

# TO USE:
# export FUNANNOTATE_DB=/path/to/databases
# singularity shell entheome.sif -B /path/to/databases:/path/to/databases
# source /opt/conda/etc/profile.d/conda.sh
# conda activate funannotate_env
# funannotate setup -i all -d "$FUNANNOTATE_DB"

# WITH GENEMARK INPUT:
# singularity shell entheome.sif -B /path/to/genemark:/opt/genemark
# source /opt/conda/etc/profile.d/conda.sh
# conda activate EGEP_env

Bootstrap: docker
From: debian:buster

%labels
    Maintainer Ian M Bollinger <ian.bollinger@entheome.org>

%post
    export DEBIAN_FRONTEND=noninteractive

    # Set up repositories
    echo "deb http://deb.debian.org/debian buster main contrib non-free" > /etc/apt/sources.list
    echo "deb http://deb.debian.org/debian-security buster/updates main contrib non-free" >> /etc/apt/sources.list
    echo "deb http://deb.debian.org/debian buster-updates main contrib non-free" >> /etc/apt/sources.list
    echo "Acquire::Check-Valid-Until no;" >> /etc/apt/apt.conf.d/99no-check-valid-until

    # Update and install base dependencies
    apt-get update && apt-get install -y \
        wget curl bzip2 ncbi-blast+ git build-essential autoconf automake libtool pkg-config \
        zlib1g-dev snap augustus augustus-data locales locales-all libgl1 procps strace \
        python3 python3-pip ninja-build libffi-dev libmount-dev libpcre2-dev libpcre3-dev \
        ca-certificates \
    && rm -rf /var/lib/apt/lists/* || { echo "Failed to install dependencies"; exit 1; }

    # Create symbolic link for snap compatibility
    ln -s /usr/bin/snap-hmm /usr/bin/snap || true

    # Install Miniconda
    wget https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-x86_64.sh -O miniconda.sh || { echo "Failed to download Miniconda"; exit 1; }
    bash miniconda.sh -b -p /opt/conda || { echo "Failed to install Miniconda"; exit 1; }
    rm miniconda.sh || { echo "Failed to remove miniconda.sh"; exit 1; }

    # Update PATH for Conda
    export PATH="/opt/conda/bin:$PATH"

    # Update Conda to the latest version
    /opt/conda/bin/conda update -y conda || { echo "Failed to update Conda"; exit 1; }

    # Initialize Conda
    /opt/conda/bin/conda init bash

    # Add Conda channels
    /bin/bash -c "conda config --add channels defaults && \
                  conda config --add channels bioconda && \
                  conda config --add channels conda-forge" || { echo "Failed to configure Conda channels"; exit 1; }

   # Create EGAP_env (second environment)
   /bin/bash -c "conda create -n EGAP_env --yes 'python>=3.8,<3.9' 'masurca>=4.1.2' \
                 'quast>=5.2.0' 'compleasm>=0.2.6' 'biopython>=1.81' 'ragtag>=2.1.0' \
                 'nanoplot>=1.43.0' 'termcolor>=2.3.0' 'minimap2>=2.28' 'bwa>=0.7.18' \
                 'samtools>=1.20' 'bamtools>=2.5.2' 'tgsgapcloser>=1.2.1' 'abyss>=2.0.2' \
                 'sepp>=4.5.1' 'psutil>=6.0.0' 'beautifulsoup4>=4.12.3' 'ncbi-datasets-cli>=16.39.0' \
                 'matplotlib-base>=3.7.3' 'trimmomatic>=0.39' 'pilon>=1.22' 'fastqc>=0.12.1' \
                 'bbmap>=39.15' 'racon>=1.5.0' 'kmc>=3.2.4' 'spades>=4.0.0' 'purge_dups>=1.2.6' \
                 'flye>=2.9.5' 'pbccs>=6.4.0' 'hifiasm>=0.21.0' 'gfatools>=0.5' \
                 'bifrost>=1.3.5' 'ratatosk>=0.9.0' mafft iqtree ete3 trimal \
                 pandas gffutils pysam scipy 'clinker-py' packaging meson" || { echo "Failed to create EGAP_env"; exit 1; }

    # Create EGEP_env (without exonerate since it’s installed from source)
    /bin/bash -c "conda create -n EGEP_env --yes python>=3.10 glib=2.64.6 \
                  mafft iqtree ete3 compleasm trimal pandas biopython psutil \
                  gffutils pysam matplotlib scipy clinker-py packaging meson" || { echo "Failed to create EGEP_env"; exit 1; }

    # Debug: Check GLib installation
    echo "Checking GLib installation:"
    find /opt/conda -name "glibconfig.h" || { echo "glibconfig.h not found"; exit 1; }
    ls -l /opt/conda/lib/glib-2.0/include/glibconfig.h || echo "glibconfig.h not in expected location"

    # Set library and pkg-config paths, including both environments
    export LD_LIBRARY_PATH="/opt/conda/envs/EGEP_env/lib:/opt/conda/envs/EGAP_env/lib:/opt/conda/lib:$LD_LIBRARY_PATH"
    export PKG_CONFIG_PATH="/opt/conda/envs/EGEP_env/lib/pkgconfig:/opt/conda/envs/EGAP_env/lib/pkgconfig:/opt/conda/lib/pkgconfig:$PKG_CONFIG_PATH"
    ldconfig
    
    # Build exonerate from source, linking against Conda’s GLib
    git clone https://github.com/nathanweeks/exonerate.git || { echo "Failed to clone exonerate"; exit 1; }
    cd exonerate
    autoreconf -i || { echo "Failed to run autoreconf for exonerate"; exit 1; }
    GLIB_CFLAGS=$(pkg-config --cflags glib-2.0) || { echo "pkg-config failed to find glib-2.0"; exit 1; }
    GLIB_LIBS=$(pkg-config --libs glib-2.0) || { echo "pkg-config failed to find glib-2.0 libs"; exit 1; }
    ./configure --prefix=/usr/local CFLAGS="$GLIB_CFLAGS" LDFLAGS="$GLIB_LIBS" || { echo "Configure failed for exonerate"; exit 1; }
    make -j$(nproc) || { echo "Make failed for exonerate"; exit 1; }
    make install || { echo "Make install failed for exonerate"; exit 1; }
    cd ..
    rm -rf exonerate

    # Create funannotate_env
    /bin/bash -c "conda create -n funannotate_env --yes 'python>=3.6,<3.9' funannotate" || { echo "Failed to create funannotate_env"; exit 1; }

    # Adjust fasta symlink
    rm -f "/opt/conda/envs/funannotate_env/bin/fasta" || true
    ln -s "/opt/conda/envs/funannotate_env/bin/fasta36" "/opt/conda/envs/funannotate_env/bin/fasta" || true

    # Install NCBI datasets CLI
    wget https://ftp.ncbi.nlm.nih.gov/pub/datasets/command-line/v2/linux-amd64/datasets -O /usr/local/bin/datasets
    chmod +x /usr/local/bin/datasets

    # Install sra-tools 3.1.1
    wget https://ftp-trace.ncbi.nlm.nih.gov/sra/sdk/3.1.1/sratoolkit.3.1.1-ubuntu64.tar.gz -O sratoolkit.tar.gz || { echo "Failed to download sra-tools"; exit 1; }
    tar -xzf sratoolkit.tar.gz || { echo "Failed to extract sra-tools"; exit 1; }
    mv sratoolkit.3.1.1-ubuntu64/bin/* /usr/local/bin/ || { echo "Failed to install sra-tools"; exit 1; }
    rm -rf sratoolkit.tar.gz sratoolkit.3.1.1-ubuntu64 || { echo "Failed to clean up sra-tools"; exit 1; }

    # Install pigz 2.8
    wget https://zlib.net/pigz/pigz-2.8.tar.gz -O pigz.tar.gz || { echo "Failed to download pigz"; exit 1; }
    tar -xzf pigz.tar.gz || { echo "Failed to extract pigz"; exit 1; }
    cd pigz-2.8
    make -j$(nproc) || { echo "Failed to build pigz"; exit 1; }
    mv pigz /usr/local/bin/ || { echo "Failed to install pigz"; exit 1; }
    cd ..
    rm -rf pigz.tar.gz pigz-2.8 || { echo "Failed to clean up pigz"; exit 1; }

    # Update CA certificates
    apt-get update && apt-get install -y ca-certificates
    update-ca-certificates

%environment
    export PATH="/usr/local/bin:/opt/conda/envs/EGEP_env/bin:/opt/conda/envs/EGAP_env/bin:/opt/conda/envs/funannotate_env/bin:/opt/conda/bin:/usr/local/bin:$PATH"
    export LD_LIBRARY_PATH="/opt/conda/envs/EGEP_env/lib:/opt/conda/envs/EGAP_env/lib:/opt/conda/lib:/usr/local/lib:$LD_LIBRARY_PATH"
    export PKG_CONFIG_PATH="/opt/conda/envs/EGEP_env/lib/pkgconfig:/opt/conda/envs/EGAP_env/lib/pkgconfig:/opt/conda/lib/pkgconfig:$PKG_CONFIG_PATH"
    export AUGUSTUS_CONFIG_PATH="/usr/share/augustus/config"
    export EVM_HOME="/opt/conda/envs/funannotate_env/opt/evidencemodeler-1.1.1"
    export PASAHOME="/opt/conda/envs/funannotate_env/opt/pasa-2.4.1"
    export TRINITYHOME="/opt/conda/envs/funannotate_env/opt/trinity-2.8.5"
    export QUARRY_PATH="/opt/conda/envs/funannotate_env/opt/codingquarry-2.0/QuarryFiles"
    export ZOE="/usr/share/snap"
    export USER="me"

%runscript
    /bin/bash -c "
        source /opt/conda/etc/profile.d/conda.sh
        # No default environment activation; pipelines will handle this
        if [ -z \"\$FUNANNOTATE_DB\" ]; then
            echo 'WARNING: FUNANNOTATE_DB is not set. Please set it to your database directory (e.g., export FUNANNOTATE_DB=/path/to/databases) and run \"funannotate setup\" manually if needed.'
        elif [ ! -d \"\$FUNANNOTATE_DB\" ]; then
            echo 'WARNING: FUNANNOTATE_DB directory (\$FUNANNOTATE_DB) does not exist. Please run \"funannotate setup -i all -d \$FUNANNOTATE_DB\" to initialize it.'
        fi
        exec \"\$@\"
    "

%help
    This container provides tools for genomic analysis with EGEP and EGAP environments.
    To use:
    - Set FUNANNOTATE_DB to your database directory: export FUNANNOTATE_DB=/path/to/databases
    - Initialize databases manually if needed: singularity run egep.sif funannotate setup -i all -d \$FUNANNOTATE_DB
    - Activate environments in your pipeline: source /opt/conda/etc/profile.d/conda.sh; conda activate EGEP_env or EGAP_env or funannotate_env
    - Example with GeneMark: singularity shell egep.sif -B /path/to/genemark:/opt/genemark
